<!DOCTYPE html>
<html>
<head>
    <title>Bot de Trading MT5</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            background: white;
            max-width: 800px;
            margin: 0 auto;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 28px;
        }
        .status-container {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
            border-left: 5px solid #dc3545;
        }
        .status.connected {
            border-left-color: #28a745;
        }
        .status.running {
            border-left-color: #17a2b8;
        }
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 30px;
        }
        @media (max-width: 600px) {
            .controls {
                grid-template-columns: 1fr;
            }
        }
        .btn {
            padding: 15px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        .btn:active {
            transform: scale(0.98);
        }
        .connect { 
            background: #007bff; 
            color: white; 
        }
        .connect:hover { background: #0056b3; }
        .start { 
            background: #28a745; 
            color: white; 
        }
        .start:hover { background: #1e7e34; }
        .stop { 
            background: #dc3545; 
            color: white; 
        }
        .stop:hover { background: #c82333; }
        .btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
        }
        .logs {
            background: #1a1a1a;
            color: #00ff00;
            padding: 20px;
            border-radius: 8px;
            height: 250px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            margin-top: 20px;
        }
        .log-entry {
            margin-bottom: 5px;
            line-height: 1.4;
        }
        .timestamp {
            color: #888;
        }
        .success { color: #00ff00; }
        .error { color: #ff4444; }
        .warning { color: #ffaa00; }
        .info { color: #4488ff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Bot de Trading MT5</h1>
        
        <div id="status" class="status-container status">
            <strong>Estado:</strong><br>
            üî¥ Desconectado de MT5<br>
            ‚èπÔ∏è Bot detenido
        </div>
        
        <div class="controls">
            <button class="btn connect" onclick="connectMT5()" id="connectBtn">
                üîó Conectar MT5
            </button>
            <button class="btn start" onclick="startBot()" id="startBtn" disabled>
                ‚ñ∂Ô∏è Iniciar Bot
            </button>
            <button class="btn stop" onclick="stopBot()" id="stopBtn" disabled>
                ‚èπÔ∏è Detener Bot
            </button>
        </div>
        
        <div class="logs" id="logs">
            <div class="log-entry info">
                <span class="timestamp">[Sistema]</span> Aplicaci√≥n iniciada. Listo para conectar.
            </div>
        </div>
    </div>

    <script>
        function connectMT5() {
            const btn = document.getElementById('connectBtn');
            btn.disabled = true;
            btn.innerHTML = '‚è≥ Conectando...';
            
            fetch('/connect', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                addLog(data.message, data.status);
                updateStatus();
                btn.disabled = false;
                btn.innerHTML = 'üîó Conectar MT5';
                
                // Habilitar bot√≥n de inicio si conexi√≥n exitosa
                if (data.status === 'success') {
                    document.getElementById('startBtn').disabled = false;
                }
            })
            .catch(error => {
                addLog('‚ùå Error de conexi√≥n: ' + error, 'error');
                btn.disabled = false;
                btn.innerHTML = 'üîó Conectar MT5';
            });
        }

        function startBot() {
            const btn = document.getElementById('startBtn');
            btn.disabled = true;
            btn.innerHTML = '‚è≥ Iniciando...';
            
            fetch('/start', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                addLog(data.message, data.status);
                updateStatus();
                
                if (data.status === 'success') {
                    document.getElementById('stopBtn').disabled = false;
                } else {
                    btn.disabled = false;
                    btn.innerHTML = '‚ñ∂Ô∏è Iniciar Bot';
                }
            })
            .catch(error => {
                addLog('‚ùå Error al iniciar: ' + error, 'error');
                btn.disabled = false;
                btn.innerHTML = '‚ñ∂Ô∏è Iniciar Bot';
            });
        }

        function stopBot() {
            const btn = document.getElementById('stopBtn');
            btn.disabled = true;
            btn.innerHTML = '‚è≥ Deteniendo...';
            
            fetch('/stop', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                addLog(data.message, data.status);
                updateStatus();
                document.getElementById('startBtn').disabled = false;
                btn.innerHTML = '‚èπÔ∏è Detener Bot';
            })
            .catch(error => {
                addLog('‚ùå Error al detener: ' + error, 'error');
                btn.disabled = false;
                btn.innerHTML = '‚èπÔ∏è Detener Bot';
            });
        }

        function updateStatus() {
            fetch('/status')
            .then(response => response.json())
            .then(data => {
                const statusDiv = document.getElementById('status');
                let statusHTML = `<strong>Estado:</strong><br>`;
                
                if (data.connected) {
                    statusHTML += `‚úÖ Conectado a MT5<br>`;
                } else {
                    statusHTML += `üî¥ Desconectado de MT5<br>`;
                }
                
                if (data.running) {
                    statusHTML += `üü¢ Bot ejecut√°ndose`;
                } else {
                    statusHTML += `‚èπÔ∏è Bot detenido`;
                }
                
                statusDiv.innerHTML = statusHTML;
                
                // Actualizar clases CSS
                statusDiv.className = 'status-container status';
                if (data.connected) statusDiv.classList.add('connected');
                if (data.running) statusDiv.classList.add('running');
            })
            .catch(error => {
                console.error('Error actualizando estado:', error);
            });
        }

        function addLog(message, type = 'info') {
            const logs = document.getElementById('logs');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${type}`;
            logEntry.innerHTML = `<span class="timestamp">[${timestamp}]</span> ${message}`;
            
            logs.appendChild(logEntry);
            logs.scrollTop = logs.scrollHeight;
        }

        // Actualizar estado cada 3 segundos
        setInterval(updateStatus, 3000);
        
        // Actualizar estado inicial
        updateStatus();
    </script>
</body>
</html>
